CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

set(SCRIPT_PATH @script_path@)

# For starting up and keeping track of Xservers for TOPPView tests on Unix
if(UNIX)
	include ( "${SCRIPT_PATH}/VirtualXServer.cmake" )
endif(UNIX)

if(NOT DEFINED TEST_MACROS_INCLUDED)
  include( "${SCRIPT_PATH}/test_macros.cmake" )
endif()


# source and build_dir
set (CTEST_SOURCE_DIRECTORY @source_dir@ )
set (BUILD_DIRECTORY        @build_dir@ )

# general ctest/cmake/other programs
set (CMAKE_BIN_PATH @cmake_bin_path@ )
set (CTEST_CMAKE_COMMAND   "${CMAKE_BIN_PATH}/cmake" )
set (CTEST_CTEST_COMMAND "${CMAKE_BIN_PATH}/ctest" )
set (MAKE_COMMAND @make_path@ )
set (CTEST_GIT_COMMAND   @git_command@ )
set (CTEST_UPDATE_COMMAND "${CTEST_GIT_COMMAND}" )

# Qt stuff
set (QT_QMAKE @qmake@ )

# compiler versions (TODO might be able to remove)
include( "${SCRIPT_PATH}/compilers.cmake" )

set (SYSTEM_IDENTIFIER @system_identifier@ )

# contrib definition
set (OPENMS_CONTRIB @contrib_dir@ )

# usually the branch or other description about the state of the sources
set (OPENMS_BUILDNAME_PREFIX @buildname_prefix@ )

# proxy settings
set( $ENV{http_proxy}    "http://http-proxy.fu-berlin.de/" )
set( $ENV{HTTP_PROXY}    "http://http-proxy.fu-berlin.de/" )

# FTP server for storing binaries, docu, checker results:
set ( FTP_LOCATION "jpfeuffer@ftp.imp.fu-berlin.de/pub/OpenMS/" )
set ( CHECKER_TARGET_PATH "${FTP_LOCATION}" )
set ( PACKAGE_TARGET_PATH "${FTP_LOCATION}nightly_binaries/" )
set ( DOCU_TARGET_PATH    "${FTP_LOCATION}" )

set (CTEST_CHECK_HTTP_ERROR ON )

# Path to compilers
set (C_COMPILER @c_compiler@ )
set (CXX_COMPILER @cxx_compiler@ )

# define generator (e.g., Unix Makefiles)
set (GENERATOR @generator@ )

# Describe type of build/tests
set (BUILD_TYPE @build_type@ )
set (CTEST_SITE @site@ )

# packaging tests only allowed for UNIX (lnx,osx), otherwise we use NSIS Installer scripts for Win
# checker and coverage tests are also only allowed for UNIX
if(UNIX)
	set (PACKAGE_TEST @package_test@ )
	set (RUN_CHECKER @run_checker@ )
	set (TEST_COVERAGE @coverage_test@)
else()
	set (PACKAGE_TEST Off )
	set (RUN_CHECKER Off )
	set (TEST_COVERAGE Off )
endif(UNIX)

# Set coverage test specific binaries/includes
if(TEST_COVERAGE)
	set (CTEST_COVERAGE_COMMAND "/usr/bin/gcov")
	include( "${SCRIPT_PATH}/exclude_for_coverage.cmake" )
endif(TEST_COVERAGE)
	

set (EXTERNAL_CODE_TESTS @external_code_test@ )

# to automatically rerun a test when failed
set (RERUN Off)

# the actual test procedure
# next line not needed, when fixed compiler paths are given to the template
# For Unix we used "test_macros.cmake -> select_compiler"
# For Win we used "selector.cmake -> select_vs_version"
# Together with compilers and paths to already compiled contribs/thirdparty binaries set in "compilers.cmake"

# call with the compiler prefix set in "compilers.cmake"
#select_compiler(@compiler_id@ )

# call with e.g. "VS10" "x64"
#select_vs_version(@vs@ @arch@)

# Next steps (found in test_macros.cmake/selector.cmake)
prepare_notes()
run_tests()
