CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

set(CMAKE_VERBOSE_MAKEFILE ON)
set(SCRIPT_PATH @script_path@)

# For starting up and keeping track of Xservers for TOPPView tests on Unix
if(UNIX)
	include ( "${SCRIPT_PATH}/VirtualXServer.cmake" )
endif(UNIX)

if(NOT DEFINED TEST_MACROS_INCLUDED)
  include( "${SCRIPT_PATH}/global_macros.cmake" )
endif()


# source and build_dir
set (CTEST_SOURCE_DIRECTORY @source_dir@ )
set (BUILD_DIRECTORY        @build_dir@ )

# general ctest/cmake/other programs
set (CMAKE_BIN_PATH @cmake_bin_path@ )
set (CTEST_CMAKE_COMMAND   "${CMAKE_BIN_PATH}cmake" )
set (CTEST_CTEST_COMMAND "${CMAKE_BIN_PATH}ctest" )
set (MAKE_COMMAND @make_path@ )
set (CTEST_GIT_COMMAND   @git_command@ )
set (CTEST_UPDATE_COMMAND "${CTEST_GIT_COMMAND}" )

# compiler versions (TODO might be able to remove)
include( "${SCRIPT_PATH}/compilers.cmake" )

# description of this system (e.g. OS version: Win8, Ubuntu15.10)
set (SYSTEM_IDENTIFIER @system_identifier@ )

# usually the branch or other description about the state of the sources e.g. release2.0.0, develop
set (OPENMS_BUILDNAME_PREFIX @buildname_prefix@ )

# proxy settings
set( $ENV{http_proxy}    "http://http-proxy.fu-berlin.de/" )
set( $ENV{HTTP_PROXY}    "http://http-proxy.fu-berlin.de/" )

# FTP server for storing binaries, docu, checker results:
set ( FTP_LOCATION "jpfeuffer@ftp.imp.fu-berlin.de/pub/OpenMS/" )
set ( CHECKER_TARGET_PATH "${FTP_LOCATION}" )
set ( PACKAGE_TARGET_PATH "${FTP_LOCATION}nightly_binaries/" )
set ( DOCU_TARGET_PATH    "${FTP_LOCATION}" )

set (CTEST_CHECK_HTTP_ERROR ON )

# Describe type of build/tests
# e.g. Default, Release
set (BUILD_TYPE @build_type@ )
# site description of this machine e.g. scratchy.imp.fu-berlin.de
set (CTEST_SITE @ctest_site@ )

# packaging tests only allowed for UNIX (lnx,osx), otherwise we use NSIS Installer scripts for Win
# checker and coverage tests are also only allowed for UNIX
if(UNIX) 
# Use the chosen settings
	set (PACKAGE_TEST @package_test@ )
	set (RUN_CHECKER @run_checker@ )
	set (TEST_COVERAGE @coverage_test@ )
else(UNIX) 
# On windows default to Off
	set (PACKAGE_TEST Off )
	set (RUN_CHECKER Off )
	set (TEST_COVERAGE Off )
endif(UNIX)

# Set coverage test specific binaries/includes
if(TEST_COVERAGE) #Currently Unix-only
	set (CTEST_COVERAGE_COMMAND "/usr/bin/gcov")
	# Holds additional excluding tests for coverage
	include( "${SCRIPT_PATH}/exclude_for_coverage.cmake" )
endif(TEST_COVERAGE)

if(PACKAGE_TEST)
	# e.g. "OpenMS-1.10.0-Linux.deb"
	SET (BUNDLE_NAME @bundle_name@ )
	# e.g. "OpenMS-1.10.0-debian_squeeze-x86_64.deb"
	SET (TARGET_NAME @package_target_name@ )
endif(PACKAGE_TEST)
	

set (EXTERNAL_CODE_TESTS @external_code_test@ )

# to automatically rerun a test when failed
set (RERUN Off)

# the actual test procedure
# next line not needed, when fixed compiler paths are given to the template
# For Unix we used "test_macros.cmake -> select_compiler"
# For Win we used "selector.cmake -> select_vs_version"
# Together with compilers and paths to already compiled contribs/thirdparty binaries set in "compilers.cmake"

if(UNIX)
	#select_compiler(@compiler_id@)
	## TODO make generic: might be Xcode for Darwin
	set (GENERATOR "Unix Makefiles" )
	# contrib folder definition
	set (CONTRIB @contrib_dir@ )
	set (QT_QMAKE_BIN_PATH @qmake_bin_path@ )
	############# If not using the selector you may also set the following: #############
	# Path to compilers
	set (C_COMPILER @c_compiler@ )
	set (CXX_COMPILER @cxx_compiler@ )
	######################################################################################
elseif(WIN32)
	## The compiler is defined by the command line environment you are using to call
	## this script e.g. "C:\Program Files (x86)\Microsoft Visual Studio %vs_version%.0\VC\vcvarsall.bat"
#	select_vs_version(@vs@ @arch@)
	############# If not using the selectors you have to set the following: #############
	## Searchengines have to be in path.
	# set (QT @qmake@ )
	# set (GENERATOR @generator@ )
	# set (CONTRIB @contrib_dir@ )
	######################################################################################
	if(DEFINED QT)
		set (QT_QMAKE_BIN_PATH "${QT}\bin\" )
	endif(DEFINED QT)
	# setup the environment variables for windows
	#set ( CTEST_ENVIRONMENT "PATH=${QT_QMAKE_BIN_PATH};${CONTRIB}\lib\;${CTEST_BINARY_DIRECTORY}\bin\${BUILD_TYPE}\;${MYRIMATCH_PATH}\;${OMSSA_PATH}\;${XTANDEM_PATH}\;${FIDO_PATH}\;$ENV{PATH}" "Path=${QT_QMAKE_BIN_PATH};${CONTRIB}\lib\;${CTEST_BINARY_DIRECTORY}\bin\${BUILD_TYPE}\;${MYRIMATCH_PATH}\;${OMSSA_PATH}\;${XTANDEM_PATH}\;${FIDO_PATH}\;$ENV{Path}")
	#set (ENV{PATH} "${QT_QMAKE_BIN_PATH};${CONTRIB}\lib\;${CTEST_BINARY_DIRECTORY}\bin\${BUILD_TYPE}\;${MYRIMATCH_PATH}\;${OMSSA_PATH}\;${XTANDEM_PATH}\;${FIDO_PATH}\;$ENV{PATH}")
	#set (ENV{Path} "${QT_QMAKE_BIN_PATH};${CONTRIB}\lib\;${CTEST_BINARY_DIRECTORY}\bin\${BUILD_TYPE}\;${MYRIMATCH_PATH}\;${OMSSA_PATH}\;${XTANDEM_PATH}\;${FIDO_PATH}\;$ENV{Path}")
else(UNIX)
endif(UNIX)

# define generator (e.g., Unix Makefiles, Visual Studio 10 Win64)
#set (GENERATOR @generator@ )

# Next steps, found in test_macros.cmake
prepare_notes()
run_tests()